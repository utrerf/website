"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.remarkMdxCodeMeta = exports.transformer = void 0;
const jsx = require("acorn-jsx");
const acorn_1 = require("acorn");
const visit = require("unist-util-visit");
const parser = acorn_1.Parser.extend(jsx());
const transformer = (ast) => {
    visit(ast, 'code', (node, index, parent) => {
        if (!node.meta) {
            return;
        }
        const code = JSON.stringify(`${node.value}\n`);
        const codeProps = node.lang ? `className="language-${node.lang}"` : '';
        const value = `<pre ${node.meta}><code ${codeProps}>{${code}}</code></pre>`;
        const estree = parser.parse(value, { ecmaVersion: 'latest' });
        parent.children[index] = { type: 'mdxFlowExpression', value, data: { estree } };
    });
};
exports.transformer = transformer;
/**
 * A markdown plugin for transforming code metadata.
 *
 * @returns A unified transformer.
 */
const remarkMdxCodeMeta = () => exports.transformer;
exports.remarkMdxCodeMeta = remarkMdxCodeMeta;
